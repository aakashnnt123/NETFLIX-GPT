{"ast":null,"code":"var _jsxFileName = \"D:\\\\netflix-gpt\\\\src\\\\components\\\\VideoBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { API_OPTIONS } from '../utils/const';\nimport { useDispatch } from 'react-redux';\nimport { addTrailerVideo } from '../utils/moviesSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VideoBackground = () => {\n  _s();\n  // const [trailerId,settrailerId] = useState(null)\n  const dispatch = useDispatch();\n  const getMovieVideo = async () => {\n    const data = await fetch('https://api.themoviedb.org/3/movie/615656/videos?language=en-US', API_OPTIONS);\n    const json = await data.json();\n    console.log(json);\n    const filterData = json.results.filter(video => video.type === \"Trailer\");\n    console.log(filterData);\n    const trailer = filterData.length ? filterData[0] : json.results[0];\n    //  settrailerId(trailer)\n    dispatch(addTrailerVideo(trailer));\n  };\n  useEffect(() => {\n    getMovieVideo();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n      width: \"560\",\n      height: \"315\",\n      src: \"https://www.youtube.com/embed/\",\n      title: \"YouTube video player\",\n      frameborder: \"0\",\n      allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\",\n      allowfullscreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(VideoBackground, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n_c = VideoBackground;\nexport default VideoBackground;\nvar _c;\n$RefreshReg$(_c, \"VideoBackground\");","map":{"version":3,"names":["React","useEffect","useState","API_OPTIONS","useDispatch","addTrailerVideo","jsxDEV","_jsxDEV","Fragment","_Fragment","VideoBackground","_s","dispatch","getMovieVideo","data","fetch","json","console","log","filterData","results","filter","video","type","trailer","length","children","width","height","src","title","frameborder","allow","allowfullscreen","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/netflix-gpt/src/components/VideoBackground.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { API_OPTIONS } from '../utils/const'\r\nimport { useDispatch } from 'react-redux'\r\nimport { addTrailerVideo } from '../utils/moviesSlice'\r\n\r\nconst VideoBackground = () => {\r\n\r\n    // const [trailerId,settrailerId] = useState(null)\r\n    const dispatch = useDispatch()\r\n    const getMovieVideo=async ()=>{\r\n        const data =  await fetch('https://api.themoviedb.org/3/movie/615656/videos?language=en-US', API_OPTIONS)\r\n         const json =  await data.json();\r\n         console.log(json);\r\n         const filterData = json.results.filter((video)=>video.type===\"Trailer\")\r\n         console.log(filterData)\r\n         const trailer = filterData.length?filterData[0]:json.results[0]\r\n        //  settrailerId(trailer)\r\n         dispatch(addTrailerVideo(trailer))\r\n         \r\n\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getMovieVideo()\r\n\r\n    },[])\r\n  return (\r\n    <>\r\n    <iframe \r\n    width=\"560\" \r\n    height=\"315\" \r\n    src=\"https://www.youtube.com/embed/\"\r\n     title=\"YouTube video player\"\r\n      frameborder=\"0\"\r\n       allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n        allowfullscreen>\r\n\r\n        </iframe>\r\n    </>\r\n    \r\n  )\r\n}\r\n\r\nexport default VideoBackground"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,eAAe,QAAQ,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEtD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE1B;EACA,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAMS,aAAa,GAAC,MAAAA,CAAA,KAAU;IAC1B,MAAMC,IAAI,GAAI,MAAMC,KAAK,CAAC,iEAAiE,EAAEZ,WAAW,CAAC;IACxG,MAAMa,IAAI,GAAI,MAAMF,IAAI,CAACE,IAAI,CAAC,CAAC;IAC/BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,MAAMG,UAAU,GAAGH,IAAI,CAACI,OAAO,CAACC,MAAM,CAAEC,KAAK,IAAGA,KAAK,CAACC,IAAI,KAAG,SAAS,CAAC;IACvEN,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC;IACvB,MAAMK,OAAO,GAAGL,UAAU,CAACM,MAAM,GAACN,UAAU,CAAC,CAAC,CAAC,GAACH,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC;IAChE;IACCR,QAAQ,CAACP,eAAe,CAACmB,OAAO,CAAC,CAAC;EAGvC,CAAC;EAEDvB,SAAS,CAAC,MAAI;IACVY,aAAa,CAAC,CAAC;EAEnB,CAAC,EAAC,EAAE,CAAC;EACP,oBACEN,OAAA,CAAAE,SAAA;IAAAiB,QAAA,eACAnB,OAAA;MACAoB,KAAK,EAAC,KAAK;MACXC,MAAM,EAAC,KAAK;MACZC,GAAG,EAAC,gCAAgC;MACnCC,KAAK,EAAC,sBAAsB;MAC3BC,WAAW,EAAC,GAAG;MACdC,KAAK,EAAC,qGAAqG;MAC1GC,eAAe;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEP;EAAC,gBACX,CAAC;AAGP,CAAC;AAAA1B,EAAA,CApCKD,eAAe;EAAA,QAGAN,WAAW;AAAA;AAAAkC,EAAA,GAH1B5B,eAAe;AAsCrB,eAAeA,eAAe;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}