{"ast":null,"code":"var _jsxFileName = \"D:\\\\New folder (3)\\\\netflix-gpt\\\\src\\\\components\\\\GptSearchBar.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport lang from '../utils/languageConstant';\nimport { useDispatch, useSelector } from 'react-redux';\nimport openai from '../utils/openai';\nimport GptError from './GptError';\nimport { API_OPTIONS } from '../utils/const';\nimport { addGptMoviesResult } from '../utils/gptSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GptSearchBar = () => {\n  _s();\n  const dispatch = useDispatch();\n  const choosen = useSelector(store => store.config.lang);\n  const searchText = useRef(null);\n  const searchMovieTMDB = async movie => {\n    const data = await fetch(\"https://api.themoviedb.org/3/search/movie?query=\" + movie + \"&include_adult=false&language=en-US&page=1\", API_OPTIONS);\n    const json = await data.json();\n    return json.results;\n    //this will return a promise \n  };\n\n  const handleGptSearchClick = async () => {\n    var _GPTresult$choices, _GPTresult$choices$, _GPTresult$choices$$m, _GPTresult$choices2, _GPTresult$choices2$, _GPTresult$choices2$$;\n    console.log(searchText.current.value);\n    const GPTquery = \"Act as a Movie Recomendation System  and suggest some movies for the query : \" + searchText.current.value + \". only give me names of 5  movies ,comma separated like the example result  given ahead .Example Gadar,hera pheri, tu jhooti mae makkar,i love my india, shershaah \";\n    const GPTresult = await openai.chat.completions.create({\n      messages: [{\n        role: 'user',\n        content: GPTquery\n      }],\n      model: 'gpt-3.5-turbo'\n    });\n    console.log((_GPTresult$choices = GPTresult.choices) === null || _GPTresult$choices === void 0 ? void 0 : (_GPTresult$choices$ = _GPTresult$choices[0]) === null || _GPTresult$choices$ === void 0 ? void 0 : (_GPTresult$choices$$m = _GPTresult$choices$.message) === null || _GPTresult$choices$$m === void 0 ? void 0 : _GPTresult$choices$$m.content);\n    const gptMovies = (_GPTresult$choices2 = GPTresult.choices) === null || _GPTresult$choices2 === void 0 ? void 0 : (_GPTresult$choices2$ = _GPTresult$choices2[0]) === null || _GPTresult$choices2$ === void 0 ? void 0 : (_GPTresult$choices2$$ = _GPTresult$choices2$.message) === null || _GPTresult$choices2$$ === void 0 ? void 0 : _GPTresult$choices2$$.content.split(\",\");\n    const primoseArray = gptMovies.map(movie => searchMovieTMDB(movie));\n    //now here we  will get array of 5 promises\n\n    const tmdbResult = await Promise.all(primoseArray);\n    console.log(tmdbResult);\n    dispatch(addGptMoviesResult({\n      movienames: gptMovies,\n      movieresults: tmdbResult\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pt-[35%] md:pt-[10%] flex justify-center\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"w-full md:w-1/2 bg-black grid grid-cols-12\",\n      onSubmit: e => e.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: searchText,\n        className: \"p-4 m-4 col-span-9\",\n        type: \"text\",\n        placeholder: lang[choosen].gptSearchPlaceholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGptSearchClick,\n        className: \"col-span-3 py-2 m-4 bg-red-800 text-white rounded-lg\",\n        children: [lang[choosen].search, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(GptSearchBar, \"H+nhT7TMF8YMmnQ5JUKY3Q3GplM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = GptSearchBar;\nexport default GptSearchBar;\nvar _c;\n$RefreshReg$(_c, \"GptSearchBar\");","map":{"version":3,"names":["React","useRef","lang","useDispatch","useSelector","openai","GptError","API_OPTIONS","addGptMoviesResult","jsxDEV","_jsxDEV","GptSearchBar","_s","dispatch","choosen","store","config","searchText","searchMovieTMDB","movie","data","fetch","json","results","handleGptSearchClick","_GPTresult$choices","_GPTresult$choices$","_GPTresult$choices$$m","_GPTresult$choices2","_GPTresult$choices2$","_GPTresult$choices2$$","console","log","current","value","GPTquery","GPTresult","chat","completions","create","messages","role","content","model","choices","message","gptMovies","split","primoseArray","map","tmdbResult","Promise","all","movienames","movieresults","className","children","onSubmit","e","preventDefault","ref","type","placeholder","gptSearchPlaceholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","search","_c","$RefreshReg$"],"sources":["D:/New folder (3)/netflix-gpt/src/components/GptSearchBar.js"],"sourcesContent":["import React, { useRef } from 'react'\r\nimport lang from '../utils/languageConstant'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport openai from '../utils/openai'\r\nimport GptError from './GptError'\r\nimport { API_OPTIONS } from '../utils/const'\r\nimport { addGptMoviesResult } from '../utils/gptSlice'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst GptSearchBar = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n    const choosen = useSelector(store =>store.config.lang)\r\n\r\n    const  searchText = useRef(null)\r\n\r\n    const searchMovieTMDB = async (movie)=>{\r\n\r\n      const data =  await fetch(\"https://api.themoviedb.org/3/search/movie?query=\"+movie+\"&include_adult=false&language=en-US&page=1\",API_OPTIONS)\r\n      const json =  await data.json();\r\n      return json.results;\r\n      //this will return a promise \r\n\r\n    }\r\n\r\n\r\nconst handleGptSearchClick = async () =>{\r\n  console.log(searchText.current.value)\r\n\r\n  const GPTquery  = \"Act as a Movie Recomendation System  and suggest some movies for the query : \"+\r\n  searchText.current.value +\". only give me names of 5  movies ,comma separated like the example result  given ahead .Example Gadar,hera pheri, tu jhooti mae makkar,i love my india, shershaah \"\r\n\r\n  const GPTresult = await openai.chat.completions.create({\r\n    messages: [{ role: 'user', content: GPTquery }],\r\n    model: 'gpt-3.5-turbo',\r\n  });\r\n\r\n \r\n\r\n  console.log(GPTresult.choices?.[0]?.message?.content);\r\n\r\n  const gptMovies = GPTresult.choices?.[0]?.message?.content.split(\",\");\r\n\r\n  const primoseArray = gptMovies.map(movie =>searchMovieTMDB(movie));\r\n  //now here we  will get array of 5 promises\r\n\r\n  const tmdbResult =  await Promise.all(primoseArray)\r\n  console.log(tmdbResult)\r\n\r\n  dispatch(addGptMoviesResult({movienames:gptMovies,movieresults:tmdbResult}))\r\n\r\n\r\n}\r\n\r\n  return (\r\n    <div className='pt-[35%] md:pt-[10%] flex justify-center'>\r\n        <form className='w-full md:w-1/2 bg-black grid grid-cols-12' onSubmit={(e)=>e.preventDefault()}>\r\n            <input  ref={searchText} className='p-4 m-4 col-span-9' type='text' placeholder={lang[choosen].gptSearchPlaceholder}/>\r\n            <button  onClick={handleGptSearchClick} className='col-span-3 py-2 m-4 bg-red-800 text-white rounded-lg'>{lang[choosen].search} </button>\r\n        </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GptSearchBar"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}