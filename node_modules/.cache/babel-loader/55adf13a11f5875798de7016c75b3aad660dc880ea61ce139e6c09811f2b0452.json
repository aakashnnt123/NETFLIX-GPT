{"ast":null,"code":"var _jsxFileName = \"D:\\\\netflix-gpt\\\\src\\\\components\\\\GptSearchBar.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport lang from '../utils/languageConstant';\nimport { useSelector } from 'react-redux';\nimport openai from '../utils/openai';\nimport GptError from './GptError';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GptSearchBar = () => {\n  _s();\n  const choosen = useSelector(store => store.config.lang);\n  const searchText = useRef(null);\n  const handleGptSearchClick = async () => {\n    var _GPTresult$choices, _GPTresult$choices$, _GPTresult$choices$$m;\n    console.log(searchText.current.value);\n    const GPTquery = \"Act as a Movie Recomendation System  and suggest some movies for the query : \" + searchText.current.value + \". only give me names of 5  movies ,comma separated like the example result  given ahead .Example Gadar,hera pheri, tu jhooti mae makkar,i love my india, shershaah \";\n    const GPTresult = await openai.chat.completions.create({\n      messages: [{\n        role: 'user',\n        content: GPTquery\n      }],\n      model: 'gpt-3.5-turbo'\n    });\n    console.log((_GPTresult$choices = GPTresult.choices) === null || _GPTresult$choices === void 0 ? void 0 : (_GPTresult$choices$ = _GPTresult$choices[0]) === null || _GPTresult$choices$ === void 0 ? void 0 : (_GPTresult$choices$$m = _GPTresult$choices$.message) === null || _GPTresult$choices$$m === void 0 ? void 0 : _GPTresult$choices$$m.content);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \" pt-[8%] flex justify-center\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"w-1/2 bg-black grid grid-cols-12\",\n      onSubmit: e => e.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ref: searchText,\n        className: \"p-4 m-4 col-span-9\",\n        type: \"text\",\n        placeholder: lang[choosen].gptSearchPlaceholder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGptSearchClick,\n        className: \"col-span-3 py-2 m-4 bg-red-800 text-white rounded-lg\",\n        children: [lang[choosen].search, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(GptSearchBar, \"SlwJ067V6qR23ODrqtfW6EucSEE=\", false, function () {\n  return [useSelector];\n});\n_c = GptSearchBar;\nexport default GptSearchBar;\nvar _c;\n$RefreshReg$(_c, \"GptSearchBar\");","map":{"version":3,"names":["React","useRef","lang","useSelector","openai","GptError","jsxDEV","_jsxDEV","GptSearchBar","_s","choosen","store","config","searchText","handleGptSearchClick","_GPTresult$choices","_GPTresult$choices$","_GPTresult$choices$$m","console","log","current","value","GPTquery","GPTresult","chat","completions","create","messages","role","content","model","choices","message","className","children","onSubmit","e","preventDefault","ref","type","placeholder","gptSearchPlaceholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","search","_c","$RefreshReg$"],"sources":["D:/netflix-gpt/src/components/GptSearchBar.js"],"sourcesContent":["import React, { useRef } from 'react'\r\nimport lang from '../utils/languageConstant'\r\nimport { useSelector } from 'react-redux'\r\nimport openai from '../utils/openai'\r\nimport GptError from './GptError'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst GptSearchBar = () => {\r\n\r\n    const choosen = useSelector(store =>store.config.lang)\r\n\r\n    const  searchText = useRef(null)\r\n\r\n\r\nconst handleGptSearchClick = async () =>{\r\n  console.log(searchText.current.value)\r\n\r\n  const GPTquery  = \"Act as a Movie Recomendation System  and suggest some movies for the query : \"+\r\n  searchText.current.value +\". only give me names of 5  movies ,comma separated like the example result  given ahead .Example Gadar,hera pheri, tu jhooti mae makkar,i love my india, shershaah \"\r\n\r\n  const GPTresult = await openai.chat.completions.create({\r\n    messages: [{ role: 'user', content: GPTquery }],\r\n    model: 'gpt-3.5-turbo',\r\n  });\r\n\r\n \r\n\r\n  console.log(GPTresult.choices?.[0]?.message?.content);\r\n\r\n}\r\n\r\n  return (\r\n    <div className=' pt-[8%] flex justify-center'>\r\n        <form className='w-1/2 bg-black grid grid-cols-12' onSubmit={(e)=>e.preventDefault()}>\r\n            <input  ref={searchText} className='p-4 m-4 col-span-9' type='text' placeholder={lang[choosen].gptSearchPlaceholder}/>\r\n            <button  onClick={handleGptSearchClick} className='col-span-3 py-2 m-4 bg-red-800 text-white rounded-lg'>{lang[choosen].search} </button>\r\n        </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GptSearchBar"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAOC,IAAI,MAAM,2BAA2B;AAC5C,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,QAAQ,MAAM,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQjC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEvB,MAAMC,OAAO,GAAGP,WAAW,CAACQ,KAAK,IAAGA,KAAK,CAACC,MAAM,CAACV,IAAI,CAAC;EAEtD,MAAOW,UAAU,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAGpC,MAAMa,oBAAoB,GAAG,MAAAA,CAAA,KAAW;IAAA,IAAAC,kBAAA,EAAAC,mBAAA,EAAAC,qBAAA;IACtCC,OAAO,CAACC,GAAG,CAACN,UAAU,CAACO,OAAO,CAACC,KAAK,CAAC;IAErC,MAAMC,QAAQ,GAAI,+EAA+E,GACjGT,UAAU,CAACO,OAAO,CAACC,KAAK,GAAE,qKAAqK;IAE/L,MAAME,SAAS,GAAG,MAAMnB,MAAM,CAACoB,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACrDC,QAAQ,EAAE,CAAC;QAAEC,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEP;MAAS,CAAC,CAAC;MAC/CQ,KAAK,EAAE;IACT,CAAC,CAAC;IAIFZ,OAAO,CAACC,GAAG,EAAAJ,kBAAA,GAACQ,SAAS,CAACQ,OAAO,cAAAhB,kBAAA,wBAAAC,mBAAA,GAAjBD,kBAAA,CAAoB,CAAC,CAAC,cAAAC,mBAAA,wBAAAC,qBAAA,GAAtBD,mBAAA,CAAwBgB,OAAO,cAAAf,qBAAA,uBAA/BA,qBAAA,CAAiCY,OAAO,CAAC;EAEvD,CAAC;EAEC,oBACEtB,OAAA;IAAK0B,SAAS,EAAC,8BAA8B;IAAAC,QAAA,eACzC3B,OAAA;MAAM0B,SAAS,EAAC,kCAAkC;MAACE,QAAQ,EAAGC,CAAC,IAAGA,CAAC,CAACC,cAAc,CAAC,CAAE;MAAAH,QAAA,gBACjF3B,OAAA;QAAQ+B,GAAG,EAAEzB,UAAW;QAACoB,SAAS,EAAC,oBAAoB;QAACM,IAAI,EAAC,MAAM;QAACC,WAAW,EAAEtC,IAAI,CAACQ,OAAO,CAAC,CAAC+B;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACtHtC,OAAA;QAASuC,OAAO,EAAEhC,oBAAqB;QAACmB,SAAS,EAAC,sDAAsD;QAAAC,QAAA,GAAEhC,IAAI,CAACQ,OAAO,CAAC,CAACqC,MAAM,EAAC,GAAC;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAApC,EAAA,CAhCKD,YAAY;EAAA,QAEEL,WAAW;AAAA;AAAA6C,EAAA,GAFzBxC,YAAY;AAkClB,eAAeA,YAAY;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}