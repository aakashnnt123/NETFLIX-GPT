{"ast":null,"code":"import _regeneratorRuntime from\"D:/netflix-gpt/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/netflix-gpt/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import React,{useRef}from'react';import lang from'../utils/languageConstant';import{useDispatch,useSelector}from'react-redux';import openai from'../utils/openai';import GptError from'./GptError';import{API_OPTIONS}from'../utils/const';import{addGptMoviesResult}from'../utils/gptSlice';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var GptSearchBar=function GptSearchBar(){var dispatch=useDispatch();var choosen=useSelector(function(store){return store.config.lang;});var searchText=useRef(null);var searchMovieTMDB=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(movie){var data,json;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://api.themoviedb.org/3/search/movie?query=\"+movie+\"&include_adult=false&language=en-US&page=1\",API_OPTIONS);case 2:data=_context.sent;_context.next=5;return data.json();case 5:json=_context.sent;return _context.abrupt(\"return\",json.results);case 7:case\"end\":return _context.stop();}},_callee);}));return function searchMovieTMDB(_x){return _ref.apply(this,arguments);};}();var handleGptSearchClick=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var _GPTresult$choices,_GPTresult$choices$,_GPTresult$choices$$m,_GPTresult$choices2,_GPTresult$choices2$,_GPTresult$choices2$$;var GPTquery,GPTresult,gptMovies,primoseArray,tmdbResult;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:console.log(searchText.current.value);GPTquery=\"Act as a Movie Recomendation System  and suggest some movies for the query : \"+searchText.current.value+\". only give me names of 5  movies ,comma separated like the example result  given ahead .Example Gadar,hera pheri, tu jhooti mae makkar,i love my india, shershaah \";_context2.next=4;return openai.chat.completions.create({messages:[{role:'user',content:GPTquery}],model:'gpt-3.5-turbo'});case 4:GPTresult=_context2.sent;console.log((_GPTresult$choices=GPTresult.choices)===null||_GPTresult$choices===void 0?void 0:(_GPTresult$choices$=_GPTresult$choices[0])===null||_GPTresult$choices$===void 0?void 0:(_GPTresult$choices$$m=_GPTresult$choices$.message)===null||_GPTresult$choices$$m===void 0?void 0:_GPTresult$choices$$m.content);gptMovies=(_GPTresult$choices2=GPTresult.choices)===null||_GPTresult$choices2===void 0?void 0:(_GPTresult$choices2$=_GPTresult$choices2[0])===null||_GPTresult$choices2$===void 0?void 0:(_GPTresult$choices2$$=_GPTresult$choices2$.message)===null||_GPTresult$choices2$$===void 0?void 0:_GPTresult$choices2$$.content.split(\",\");primoseArray=gptMovies.map(function(movie){return searchMovieTMDB(movie);});//now here we  will get array of 5 promises\n_context2.next=10;return Promise.all(primoseArray);case 10:tmdbResult=_context2.sent;console.log(tmdbResult);dispatch(addGptMoviesResult({movienames:gptMovies,movieresults:tmdbResult}));case 13:case\"end\":return _context2.stop();}},_callee2);}));return function handleGptSearchClick(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsx(\"div\",{className:\"pt-[35%] md:pt-[10%] flex justify-center\",children:/*#__PURE__*/_jsxs(\"form\",{className:\"w-full md:w-1/2 bg-black grid grid-cols-12\",onSubmit:function onSubmit(e){return e.preventDefault();},children:[/*#__PURE__*/_jsx(\"input\",{ref:searchText,className:\"p-4 m-4 col-span-9\",type:\"text\",placeholder:lang[choosen].gptSearchPlaceholder}),/*#__PURE__*/_jsxs(\"button\",{onClick:handleGptSearchClick,className:\"col-span-3 py-2 m-4 bg-red-800 text-white rounded-lg\",children:[lang[choosen].search,\" \"]})]})});};export default GptSearchBar;","map":{"version":3,"names":["React","useRef","lang","useDispatch","useSelector","openai","GptError","API_OPTIONS","addGptMoviesResult","jsx","_jsx","jsxs","_jsxs","GptSearchBar","dispatch","choosen","store","config","searchText","searchMovieTMDB","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","movie","data","json","wrap","_callee$","_context","prev","next","fetch","sent","abrupt","results","stop","_x","apply","arguments","handleGptSearchClick","_ref2","_callee2","_GPTresult$choices","_GPTresult$choices$","_GPTresult$choices$$m","_GPTresult$choices2","_GPTresult$choices2$","_GPTresult$choices2$$","GPTquery","GPTresult","gptMovies","primoseArray","tmdbResult","_callee2$","_context2","console","log","current","value","chat","completions","create","messages","role","content","model","choices","message","split","map","Promise","all","movienames","movieresults","className","children","onSubmit","e","preventDefault","ref","type","placeholder","gptSearchPlaceholder","onClick","search"],"sources":["D:/netflix-gpt/src/components/GptSearchBar.js"],"sourcesContent":["import React, { useRef } from 'react'\r\nimport lang from '../utils/languageConstant'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport openai from '../utils/openai'\r\nimport GptError from './GptError'\r\nimport { API_OPTIONS } from '../utils/const'\r\nimport { addGptMoviesResult } from '../utils/gptSlice'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst GptSearchBar = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n    const choosen = useSelector(store =>store.config.lang)\r\n\r\n    const  searchText = useRef(null)\r\n\r\n    const searchMovieTMDB = async (movie)=>{\r\n\r\n      const data =  await fetch(\"https://api.themoviedb.org/3/search/movie?query=\"+movie+\"&include_adult=false&language=en-US&page=1\",API_OPTIONS)\r\n      const json =  await data.json();\r\n      return json.results;\r\n      //this will return a promise \r\n\r\n    }\r\n\r\n\r\nconst handleGptSearchClick = async () =>{\r\n  console.log(searchText.current.value)\r\n\r\n  const GPTquery  = \"Act as a Movie Recomendation System  and suggest some movies for the query : \"+\r\n  searchText.current.value +\". only give me names of 5  movies ,comma separated like the example result  given ahead .Example Gadar,hera pheri, tu jhooti mae makkar,i love my india, shershaah \"\r\n\r\n  const GPTresult = await openai.chat.completions.create({\r\n    messages: [{ role: 'user', content: GPTquery }],\r\n    model: 'gpt-3.5-turbo',\r\n  });\r\n\r\n \r\n\r\n  console.log(GPTresult.choices?.[0]?.message?.content);\r\n\r\n  const gptMovies = GPTresult.choices?.[0]?.message?.content.split(\",\");\r\n\r\n  const primoseArray = gptMovies.map(movie =>searchMovieTMDB(movie));\r\n  //now here we  will get array of 5 promises\r\n\r\n  const tmdbResult =  await Promise.all(primoseArray)\r\n  console.log(tmdbResult)\r\n\r\n  dispatch(addGptMoviesResult({movienames:gptMovies,movieresults:tmdbResult}))\r\n\r\n\r\n}\r\n\r\n  return (\r\n    <div className='pt-[35%] md:pt-[10%] flex justify-center'>\r\n        <form className='w-full md:w-1/2 bg-black grid grid-cols-12' onSubmit={(e)=>e.preventDefault()}>\r\n            <input  ref={searchText} className='p-4 m-4 col-span-9' type='text' placeholder={lang[choosen].gptSearchPlaceholder}/>\r\n            <button  onClick={handleGptSearchClick} className='col-span-3 py-2 m-4 bg-red-800 text-white rounded-lg'>{lang[choosen].search} </button>\r\n        </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GptSearchBar"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}