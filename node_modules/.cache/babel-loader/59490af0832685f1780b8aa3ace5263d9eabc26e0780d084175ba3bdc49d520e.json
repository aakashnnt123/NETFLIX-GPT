{"ast":null,"code":"var _jsxFileName = \"D:\\\\netflix-gpt\\\\src\\\\components\\\\VideoBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { API_OPTIONS } from '../utils/const';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addTrailerVideo } from '../utils/moviesSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoBackground = ({\n  movie_id\n}) => {\n  _s();\n  // const [trailerId,settrailerId] = useState(null)\n  const trailerVideo = useSelector(store => {\n    var _store$movies;\n    return (_store$movies = store.movies) === null || _store$movies === void 0 ? void 0 : _store$movies.trailerVideo;\n  });\n  // usemoviestrailer(movie_id);\n\n  const dispatch = useDispatch();\n  const getMovieVideo = async () => {\n    const data = await fetch(\"https://api.themoviedb.org/3/movie/\" + movie_id + \"/videos?language=en-US\", API_OPTIONS);\n    const json = await data.json();\n    const filterData = json.results.filter(video => video.type == \"Trailer\");\n    const trailer = filterData.length ? filterData[0] : json.results[0];\n    //  settrailerId(trailer)\n    dispatch(addTrailerVideo(trailer));\n  };\n  useEffect(() => {\n    getMovieVideo();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n      className: \"w-screen aspect-video\",\n      src: \"https://www.youtube.com/embed/\" + (trailerVideo === null || trailerVideo === void 0 ? void 0 : trailerVideo.key) + \"?&autoplay=1&mute=1\",\n      title: \"YouTube video player\",\n      frameBorder: \"0\",\n      allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\",\n      allowFullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoBackground, \"SL0ME/v5YoVIodnUm5orAlohk5A=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = VideoBackground;\nexport default VideoBackground;\nvar _c;\n$RefreshReg$(_c, \"VideoBackground\");","map":{"version":3,"names":["React","useEffect","useState","API_OPTIONS","useDispatch","useSelector","addTrailerVideo","jsxDEV","_jsxDEV","VideoBackground","movie_id","_s","trailerVideo","store","_store$movies","movies","dispatch","getMovieVideo","data","fetch","json","filterData","results","filter","video","type","trailer","length","className","children","src","key","title","frameBorder","allow","allowFullScreen","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/netflix-gpt/src/components/VideoBackground.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { API_OPTIONS } from '../utils/const'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { addTrailerVideo } from '../utils/moviesSlice'\r\n\r\n\r\nconst VideoBackground = ({movie_id}) => {\r\n\r\n    // const [trailerId,settrailerId] = useState(null)\r\n    const trailerVideo  =useSelector(store =>store.movies?.trailerVideo);\r\n    // usemoviestrailer(movie_id);\r\n    \r\n        const dispatch = useDispatch();\r\n        const getMovieVideo=async ()=>{\r\n           \r\n            const data =  await fetch(\"https://api.themoviedb.org/3/movie/\"+movie_id+\"/videos?language=en-US\", API_OPTIONS)\r\n             const json =  await data.json();\r\n             \r\n             const filterData = json.results.filter((video)=>video.type==\"Trailer\")\r\n             \r\n             const trailer = filterData.length?filterData[0]:json.results[0]\r\n            //  settrailerId(trailer)\r\n             dispatch(addTrailerVideo(trailer))\r\n             \r\n    \r\n        }\r\n    \r\n        useEffect(()=>{\r\n            getMovieVideo()\r\n    \r\n        },[])\r\n    \r\n    \r\n    \r\n  return (\r\n    <div className='w-screen'>\r\n    <iframe \r\n    className='w-screen aspect-video'\r\n    \r\n    src={\"https://www.youtube.com/embed/\"+ trailerVideo?.key+\"?&autoplay=1&mute=1\"}\r\n     title=\"YouTube video player\"\r\n      frameBorder=\"0\"\r\n       allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n        allowFullScreen>\r\n\r\n        </iframe>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default VideoBackground"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,eAAe,QAAQ,sBAAsB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGtD,MAAMC,eAAe,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAEpC;EACA,MAAMC,YAAY,GAAGP,WAAW,CAACQ,KAAK;IAAA,IAAAC,aAAA;IAAA,QAAAA,aAAA,GAAGD,KAAK,CAACE,MAAM,cAAAD,aAAA,uBAAZA,aAAA,CAAcF,YAAY;EAAA,EAAC;EACpE;;EAEI,MAAMI,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAMa,aAAa,GAAC,MAAAA,CAAA,KAAU;IAE1B,MAAMC,IAAI,GAAI,MAAMC,KAAK,CAAC,qCAAqC,GAACT,QAAQ,GAAC,wBAAwB,EAAEP,WAAW,CAAC;IAC9G,MAAMiB,IAAI,GAAI,MAAMF,IAAI,CAACE,IAAI,CAAC,CAAC;IAE/B,MAAMC,UAAU,GAAGD,IAAI,CAACE,OAAO,CAACC,MAAM,CAAEC,KAAK,IAAGA,KAAK,CAACC,IAAI,IAAE,SAAS,CAAC;IAEtE,MAAMC,OAAO,GAAGL,UAAU,CAACM,MAAM,GAACN,UAAU,CAAC,CAAC,CAAC,GAACD,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;IAChE;IACCN,QAAQ,CAACV,eAAe,CAACoB,OAAO,CAAC,CAAC;EAGvC,CAAC;EAEDzB,SAAS,CAAC,MAAI;IACVgB,aAAa,CAAC,CAAC;EAEnB,CAAC,EAAC,EAAE,CAAC;EAIX,oBACET,OAAA;IAAKoB,SAAS,EAAC,UAAU;IAAAC,QAAA,eACzBrB,OAAA;MACAoB,SAAS,EAAC,uBAAuB;MAEjCE,GAAG,EAAE,gCAAgC,IAAElB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEmB,GAAG,IAAC,qBAAsB;MAC9EC,KAAK,EAAC,sBAAsB;MAC3BC,WAAW,EAAC,GAAG;MACdC,KAAK,EAAC,qGAAqG;MAC1GC,eAAe;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAGV,CAAC;AAAA5B,EAAA,CA3CKF,eAAe;EAAA,QAGIJ,WAAW,EAGXD,WAAW;AAAA;AAAAoC,EAAA,GAN9B/B,eAAe;AA6CrB,eAAeA,eAAe;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}